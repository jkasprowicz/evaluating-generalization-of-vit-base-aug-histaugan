import torch
from sklearn.metrics import classification_report, confusion_matrix
import numpy as np

# ==========================================================
# 1Ô∏è‚É£ Avalia√ß√£o no conjunto de valida√ß√£o
# ==========================================================
model.eval()
y_true, y_pred = [], []

with torch.no_grad():
    for inputs, labels in val_loader:
        inputs = inputs.to(DEVICE)
        labels = labels.to(DEVICE)

        with torch.amp.autocast('cuda'):
            outputs = model(inputs)
            preds = torch.argmax(outputs, dim=1)  # predicted class index

        y_true.extend(labels.cpu().numpy())
        y_pred.extend(preds.cpu().numpy())

# ==========================================================
# 2Ô∏è‚É£ C√°lculo das m√©tricas
# ==========================================================
class_names = val_dataset.classes  # automatically read from folder names

print("‚úÖ Classes:", class_names)
print("\nüìä Classification Report:")
print(classification_report(y_true, y_pred, target_names=class_names, digits=4))

# ==========================================================
# 3Ô∏è‚É£ Matriz de confus√£o
# ==========================================================
import matplotlib.pyplot as plt
import seaborn as sns

cm = confusion_matrix(y_true, y_pred)
plt.figure(figsize=(8,6))
sns.heatmap(cm, annot=True, fmt='d', xticklabels=class_names, yticklabels=class_names)
plt.xlabel('Predito')
plt.ylabel('Real')
plt.title('Matriz de Confus√£o - PBC Validation Set')
plt.show()
